<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Abnormal Distributions</title>
    <link>https://abndistro.com/</link>
    <description>Recent content in Home on Abnormal Distributions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://abndistro.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sample Dockerfile for deploying R Shiny apps on ShinyProxy</title>
      <link>https://abndistro.com/post/2021/05/11/sample-dockerfile-for-deploying-r-shiny-apps-on-shinyproxy/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/post/2021/05/11/sample-dockerfile-for-deploying-r-shiny-apps-on-shinyproxy/</guid>
      <description>pre  code.sourceCode { white-space: pre; position: relative; } pre  code.sourceCode  span { display: inline-block; line-height: 1.25; } pre  code.sourceCode  span:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode  span { color: inherit; text-decoration: inherit; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { pre  code.</description>
    </item>
    
    <item>
      <title>Using Serverless Framework to deploy AWS Lambda functions with custom Python deployment packages</title>
      <link>https://abndistro.com/post/2021/05/11/using-serverless-framework-to-deploy-an-aws-lambda-function-with-a-custom-deployment-package/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/post/2021/05/11/using-serverless-framework-to-deploy-an-aws-lambda-function-with-a-custom-deployment-package/</guid>
      <description>pre  code.sourceCode { white-space: pre; position: relative; } pre  code.sourceCode  span { display: inline-block; line-height: 1.25; } pre  code.sourceCode  span:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode  span { color: inherit; text-decoration: inherit; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { pre  code.</description>
    </item>
    
    <item>
      <title>Distributed training using AWS, Python, and boto3</title>
      <link>https://abndistro.com/post/2020/07/03/distributed-training-aws-using-python-and-boto3/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/post/2020/07/03/distributed-training-aws-using-python-and-boto3/</guid>
      <description>Overview I recently participated in the M5 Forecasting - Accuracy Kaggle competition to forecast daily sales for over 30,000 WalMart products. I had some initial struggles processing the data and training models in-memory, so I eventually turned to running distributed training jobs using AWS SageMaker.
This post outlines the basic steps required to run a distributed machine learning job on AWS using the SageMaker SDK in Python. The steps are broken down into the following:</description>
    </item>
    
    <item>
      <title>Object detection using AWS, Python, and GluonCV</title>
      <link>https://abndistro.com/post/2019/12/07/object-detection-using-aws-and-gluoncv/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/post/2019/12/07/object-detection-using-aws-and-gluoncv/</guid>
      <description>This post briefly describes how I built an object detection model using AWS SageMaker and GluonCV to detect Blue Cross Blue Shield logos. Full code and notebooks can be found in the GitHub repo.
Collecting and preparing training images To collect images for training, I searched Google for &amp;ldquo;bluecross blueshied logo&amp;rdquo;, &amp;ldquo;bluecross blueshield letter&amp;rdquo;, &amp;ldquo;bluecross blueshield building&amp;rdquo;, &amp;ldquo;bluecross blueshield shirt&amp;rdquo;, &amp;ldquo;bluecross blueshield event&amp;rdquo;, &amp;ldquo;bluecross blueshield shirt&amp;rdquo;, and &amp;ldquo;bluecross blueshield bus&amp;rdquo;. I ended up with 400 images for training and validation.</description>
    </item>
    
    <item>
      <title>HTTP POST request using Node.js</title>
      <link>https://abndistro.com/post/2019/07/15/http-post-request-using-node-js/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/post/2019/07/15/http-post-request-using-node-js/</guid>
      <description>pre  code.sourceCode { white-space: pre; position: relative; } pre  code.sourceCode  span { display: inline-block; line-height: 1.25; } pre  code.sourceCode  span:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode  span { color: inherit; text-decoration: inherit; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { pre  code.</description>
    </item>
    
    <item>
      <title>Detecting image differences using Python and OpenCV</title>
      <link>https://abndistro.com/post/2019/07/07/detecting-image-differences-using-python-and-opencv/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/post/2019/07/07/detecting-image-differences-using-python-and-opencv/</guid>
      <description>pre  code.sourceCode { white-space: pre; position: relative; } pre  code.sourceCode  span { display: inline-block; line-height: 1.25; } pre  code.sourceCode  span:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode  span { color: inherit; text-decoration: inherit; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { pre  code.</description>
    </item>
    
    <item>
      <title>Finding row-wise maximum values in a sparse matrix using Rcpp</title>
      <link>https://abndistro.com/post/2019/07/01/finding-row-wise-maximum-values-in-sparse-matrix-using-rcpp/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/post/2019/07/01/finding-row-wise-maximum-values-in-sparse-matrix-using-rcpp/</guid>
      <description>pre  code.sourceCode { white-space: pre; position: relative; } pre  code.sourceCode  span { display: inline-block; line-height: 1.25; } pre  code.sourceCode  span:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode  span { color: inherit; text-decoration: inherit; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { pre  code.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://abndistro.com/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abndistro.com/projects/</guid>
      <description>XMin is the first Hugo theme I have designed. The original reason that I wrote it was I needed a minimal example of Hugo themes when I was writing the blogdown book. Basically I wanted a simple theme that supports a navigation menu, a home page, other single pages, lists of pages, blog posts, categories, tags, and RSS. That is all. Nothing fancy. In terms of CSS and JavaScript, I really want to keep them minimal.</description>
    </item>
    
  </channel>
</rss>
